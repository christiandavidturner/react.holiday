webpackJsonp([5652237245582],{509:function(n,s){n.exports={data:{site:{siteMetadata:{title:"React ðŸŽ„",author:"Michael Chan @chantastic"}},markdownRemark:{id:"/Users/chan/learnreact/react.holiday/src/pages/2017/19.md absPath of file >>> MarkdownRemark",html:'<div class="measure">\n<blockquote>\n<p>I know what my decision is,<br>\nWhich is not to decide.</p>\n</blockquote>\n<p>Indecision is the best tool you have for <strong>smooshing</strong> components together.</p>\n<p><strong>Master it.</strong></p>\n<h2>Listen to Cinderella; leave a clue</h2>\n<blockquote>\n<p>Iâ€™ll just leave him a clue:<br>\nFor example, a shoe.<br>\nAnd then see what heâ€™ll do.</p>\n</blockquote>\n<p><a href="https://genius.com/Anna-kendrick-on-the-steps-of-the-palace-annotated">On the Steps of the Palace</a>,\nCinderella isnâ€™t sure what to do. So she leaves a shoe as a clue and lets\nthe prince decide what to do.</p>\n<p>Letâ€™s codify this masterful indecision.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">AClue</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">\'a shoe\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">ThePrince</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AClue</span>\n    <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>clue <span class="token operator">=></span>\n      <span class="token operator">&lt;</span>CheckEveryoneInTheKingdom clue<span class="token punctuation">=</span><span class="token punctuation">{</span>clue<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>\n      </div>\n<br />\n<p>If Cinderella were a React developer, sheâ€™d prefer <strong>render props</strong>.</p>\n<h2>A render prop</h2>\n<p>Simply, <strong>a render prop</strong> is indecision.\nReact calls <code>render()</code> on a component which delegates to <code>props.render</code>.  </p>\n<p>The power is in the clues.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"a clue"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>A fairy-tail refactor of <code>IdPager</code></h2>\n<p>Letâ€™s refactor <code>IdPager#render()</code> to not-decide like Cinderella.</p>\n<p>Start where we render the component.\nGive <code>render</code> as a propâ€”\na function that takes <strong>a clue</strong> and returns a component.</p>\n<p>Here, the clue <strong>clue</strong> is <code>id</code> and the return is a <code>&#x3C;Pokemon /></code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IdPager</span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>id <span class="token operator">=></span> <span class="token operator">&lt;</span>Pokemon id<span class="token punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<br />\n<p>Component-side, itâ€™s simple as calling <code>props.render</code> with <code>state.id</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token operator">...</span>\n  <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<h2>Why though?</h2>\n<p>Using a <a href="/2017/18">component prop</a> was great first step.\nIt allowed us to uncouple the component specifics.\nBut there remained a <code>prop</code> coupling around <code>id</code>.</p>\n<p>With <strong>render props</strong>, we control all aspects of render.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IdPager</span>\n  <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>id <span class="token operator">=></span>\n    <span class="token operator">&lt;</span>OtherComponent\n      anotherWordForId<span class="token punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span>\n      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>some-class-name<span class="token punctuation">"</span></span>\n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">></span>\n</code></pre>\n      </div>\n<h2>Tinker with it</h2>\n<p>Use the workspace below and explore render props.</p>\n<p>Create a <code>Character</code> component that consumes the <a href="https://swapi.co/">Star Wars API</a>.\nRender a second <code>IdPager</code> that pages through Star Wars <code>Character</code>s.</p>\n</div>\n<iframe src="https://codesandbox.io/embed/x9zqlx1xww" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>',frontmatter:{title:"Day 19: Decide not to decide",date:"December 19, 2017"}}},pathContext:{slug:"/2017/19/"}}}});
//# sourceMappingURL=path---2017-19-fb420ae9a296cdd37519.js.map