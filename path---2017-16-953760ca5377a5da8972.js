webpackJsonp([0xaa64f2df4a6f],{505:function(n,a){n.exports={data:{site:{siteMetadata:{title:"React 🎄",author:"Michael Chan @chantastic"}},markdownRemark:{id:"/Users/chan/learnreact/react.holiday/src/pages/2017/16.md absPath of file >>> MarkdownRemark",html:'<div class="measure">\n<p>Today we’ll talk about things that <strong>don’t</strong> happen!</p>\n<h2>First, a new component</h2>\n<p>I’d like you to write a new component.</p>\n<p>You’ll <a href="/2017/5/">define this component</a> <a href="/2017/7/">with some state</a> and <a href="/2017/6/">event handlers</a> for <a href="/2017/9/">updating that state</a>. Here are the instructions:</p>\n<style>\n.short-list ul li {\n  margin-bottom: 0;\n}\n</style>\n<div class="short-list">\n<ul>\n<li>Name it <code>PokemonPager</code></li>\n<li>Set the initial state to have an <code>id</code> of <code>1</code></li>\n<li>Render <code>state.id</code> in an <code>h2</code> component</li>\n<li>\n<p>Renders two <code>button</code> components:</p>\n<ul>\n<li>Clicking <strong>“Previous”</strong> decrements <code>id</code></li>\n<li>Clicking <strong>“Next”</strong> increments <code>id</code></li>\n</ul>\n</li>\n</ul>\n</div>\n<p><a href="https://codesandbox.io/s/new">Create a new sandbox</a> for your component. Try not to look ahead.</p>\n<p><span style="font-size: 2em">⚛️ 💪</span></p>\n<h2>World’s Worst Pokemon Pager</h2>\n<p>You’ve made a <code>PokemonPager</code> but it’s a bad one.\nThat’s my fault.</p>\n<p>I forgot that it needs to render a <code>Pokemon</code>.<br>\nLet’s fix that!</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">PokemonPager</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pokemon</span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token operator">...</span>\n</code></pre>\n      </div>\n<br />\n<p>Now we see a big number <code>1</code> above Bulbasaur’s name and abilities.</p>\n<p>What happens when we click the buttons?</p>\n<h2>Where’s Ivysaur?!?</h2>\n<p>Our number gets incremented but Bulbasaur remains the same.</p>\n<p>The components are updating—we see that in the number—but <code>Pokemon</code> isn’t changing.</p>\n<p><span style="font-size: 2em">🤔</span></p>\n<h2>This is where I leave you</h2>\n<p>Here’s the problem:</p>\n<p>The <code>Pokemon</code> component only fetches a Pokemon when it gets <code>mounted</code>.<br>\nIt’s only <code>mounted</code> once. After that, it’s gets <code>updated</code>.</p>\n<p>We need to fetch the next Pokemon in one of the <a href="https://reactjs.org/docs/react-component.html#updating">updating lifecycle methods</a>.</p>\n<p>Read the docs on <a href="https://reactjs.org/docs/react-component.html#updating">updating lifecycle methods</a>. Find and use one of the methods to fetch a Pokemon every time the component receives a prop <code>id</code>.</p>\n<h2>Tinker with it</h2>\n<p>Use the workspace below and explore updating lifecycle methods.</p>\n<p>Make an attempt and I’ll show you my recommendation tomorrow.</p>\n<p><em>Read sections above carefully; they subtly suggest the right method. Don’t forget that most lifecycle methods take arguments.</em></p>\n</div>\n<iframe src="https://codesandbox.io/embed/5xlq7yjxyl" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>',frontmatter:{title:"Day 16: Mind the lifecycle gap",date:"December 16, 2017"}}},pathContext:{slug:"/2017/16/"}}}});
//# sourceMappingURL=path---2017-16-953760ca5377a5da8972.js.map