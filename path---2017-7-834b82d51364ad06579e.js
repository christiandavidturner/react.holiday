webpackJsonp([0xc22540227275],{515:function(n,s){n.exports={data:{site:{siteMetadata:{title:"React üéÑ",author:"Michael Chan @chantastic"}},markdownRemark:{id:"/Users/chan/learnreact/react.holiday/src/pages/2017/7.md absPath of file >>> MarkdownRemark",html:'<div class="measure">\n<blockquote>\n<p>Being sexy is all about attitude‚Ä¶ It‚Äôs a state of mind.<br>\n‚Äî Amisha Patel</p>\n</blockquote>\n<p>One of the <a href="/2017/5">special powers</a> of class components is their ability to hold state.</p>\n<p>With state, you get interactivity.\nNo state, no interactivity.\nSo component state isn‚Äôt just <strong>a</strong> feature, it‚Äôs <strong>the</strong> feature.</p>\n<h2>How I do dat state hawtnez?</h2>\n<p>Start with an initial state.\nDo this in the constructor of your class components.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyStateOfMind</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> sexy<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n</code></pre>\n      </div>\n<p>In <code>create-react-app</code> projects, use this <a href="https://babeljs.io/docs/plugins/transform-class-properties/">ESNext syntax</a> to avoid the constructor noise.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">MyStateOfMind</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> sexy<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n</code></pre>\n      </div>\n<h2>Back to Claps</h2>\n<p>Let‚Äôs add a <code>clapCount</code> state to the <code>ClapsCounter</code> we worked on <a href="/2017/6">yesterday</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ClapCounter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> clapCount<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>\n  \n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>clapCount <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">" claps"</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span></span>\n        <span class="token punctuation">></span></span>\n          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>clapCount<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">\' \'</span><span class="token punctuation">}</span>üëè\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span> be the first to clap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Stay sexy, nerds</h2>\n<p>Now you know how to initialize state and your state of mind will always be sexy.</p>\n<p>As for our <code>clapCount</code> state, it‚Äôll be changing tomorrow‚Ä¶</p>\n<h2>Tinker with it</h2>\n<p>Use the workspace below and play with state.</p>\n<ul>\n<li>Change the initial state from <code>0</code> to <code>100</code>. Does the alert read <code>101 claps</code>?</li>\n<li>Add more state properties. Try strings, numbers, function expressions, whatever you want.</li>\n</ul>\n</div>\n<iframe src="https://codesandbox.io/embed/q8oprqk16q" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>',frontmatter:{title:"Day 7: State of mind",date:"December 07, 2017"}}},pathContext:{slug:"/2017/7/"}}}});
//# sourceMappingURL=path---2017-7-834b82d51364ad06579e.js.map